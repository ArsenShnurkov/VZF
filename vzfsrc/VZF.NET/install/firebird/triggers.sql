/* Yet Another Forum.NET Firebird data layer by vzrus
 * Copyright (C) 2006-2014 Vladimir Zakharov
 * https://github.com/vzrus
 * http://sourceforge.net/projects/yaf-datalayers/
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2 only
 * General class structure is based on MS SQL Server code,
 * created by YAF developers
 *
 * http://www.yetanotherforum.net/
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation;version 2 only
 * of the License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

CREATE PROCEDURE DP_CHECK_OR_CREATE_TRIGGER_PROC
  (TABNAME VARCHAR(50), TRNAME VARCHAR(50), COLNAME VARCHAR(50), GENNAME VARCHAR(50),ST VARCHAR(50),TT VARCHAR(50), TP INTEGER, GO INTEGER)
AS
BEGIN
  IF (EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = :TRNAME
  )) THEN  
  EXECUTE STATEMENT 'CREATE TRIGGER "' || :TRNAME ||'" FOR "' 
  || :TABNAME || '"  "' || :ST  || '"  "' || :TT || '" POSITION '' || :TP   
  || '' AS BEGIN IF (NEW."' || :COLNAME  || '" = GEN_ID("' || :GENNAME || '", 1); END;';
  END;
--GO

DROP PROCEDURE DP_CHECK_OR_CREATE_TRIGGER_PROC;
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}SBOXMESG_SBOXMESGID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}SBOXMESG_SBOXMESGID FOR {objectQualifier}SHOUTBOXMESSAGE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.SHOUTBOXMESSAGEID IS NULL) THEN
  NEW.SHOUTBOXMESSAGEID = GEN_ID(SEQ_{objectQualifier}SBOXMESG_SBOXMESGID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}POLL_POLLID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}POLL_POLLID FOR {objectQualifier}POLL
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.POLLID IS NULL) THEN
  NEW.POLLID = GEN_ID(SEQ_{objectQualifier}POLL_POLLID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}TOPSTATUS_TOPSTID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}TOPSTATUS_TOPSTID FOR {objectQualifier}TOPICSTATUS
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.TOPICSTATUSID IS NULL) THEN
  NEW.TOPICSTATUSID = GEN_ID(SEQ_{objectQualifier}TOPSTATUS_TOPSTID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}TOPIC_TOPICID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}TOPIC_TOPICID FOR {objectQualifier}TOPIC
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.TOPICID IS NULL) THEN
  NEW.TOPICID = GEN_ID(SEQ_{objectQualifier}TOPIC_TOPICID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}ACCESS_ACCESSMASKID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}ACCESS_ACCESSMASKID FOR {objectQualifier}ACCESSMASK
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.ACCESSMASKID IS NULL) THEN
  NEW.ACCESSMASKID = GEN_ID(SEQ_{objectQualifier}ACCESSMASK_ACCESSMASKID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}ATTACH_ATTACHMENTID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}ATTACH_ATTACHMENTID FOR {objectQualifier}ATTACHMENT
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.ATTACHMENTID IS NULL) THEN
  NEW.ATTACHMENTID = GEN_ID(SEQ_{objectQualifier}ATTACHMENT_ATTACHMENTID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}BANNEDIP_ID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}BANNEDIP_ID FOR {objectQualifier}BANNEDIP
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(SEQ_{objectQualifier}BANNEDIP_ID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}BOARD_BOARDID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}BOARD_BOARDID FOR {objectQualifier}BOARD
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.BOARDID IS NULL) THEN
  NEW.BOARDID = GEN_ID(SEQ_{objectQualifier}BOARD_BOARDID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}CATEGORY_CATEGORYID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}CATEGORY_CATEGORYID FOR {objectQualifier}CATEGORY
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.CATEGORYID IS NULL) THEN
  NEW.CATEGORYID = GEN_ID(SEQ_{objectQualifier}CATEGORY_CATEGORYID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}CHEKE_CHECKEMAILID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}CHEKE_CHECKEMAILID FOR {objectQualifier}CHECKEMAIL
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.CHECKEMAILID IS NULL) THEN
  NEW.CHECKEMAILID = GEN_ID(SEQ_{objectQualifier}CHECKEMAIL_CHECKEMAILID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}CHOICE_CHOICEID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}CHOICE_CHOICEID FOR {objectQualifier}CHOICE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.CHOICEID IS NULL) THEN
  NEW.CHOICEID = GEN_ID(SEQ_{objectQualifier}CHOICE_CHOICEID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}EVENTLOG_EVENTLOGID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}EVENTLOG_EVENTLOGID FOR {objectQualifier}EVENTLOG
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.EVENTLOGID IS NULL) THEN
  NEW.EVENTLOGID = GEN_ID(SEQ_{objectQualifier}EVENTLOG_EVENTLOGID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}EXTENSION_EXTENSIONID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}EXTENSION_EXTENSIONID FOR {objectQualifier}EXTENSION
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.EXTENSIONID IS NULL) THEN
  NEW.EXTENSIONID = GEN_ID(SEQ_{objectQualifier}EXTENSION_EXTENSIONID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}MAIL_MAILID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}MAIL_MAILID FOR {objectQualifier}MAIL
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.MAILID IS NULL) THEN
  NEW.MAILID = GEN_ID(SEQ_{objectQualifier}MAIL_MAILID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}FORUM_FORUMID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}FORUM_FORUMID FOR {objectQualifier}FORUM
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.FORUMID IS NULL) THEN
  NEW.FORUMID = GEN_ID(SEQ_{objectQualifier}FORUM_FORUMID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}BBCODE_BBCODEID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}BBCODE_BBCODEID FOR {objectQualifier}BBCODE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.BBCODEID IS NULL) THEN
  NEW.BBCODEID = GEN_ID(SEQ_{objectQualifier}BBCODE_BBCODEID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}MEDAL_MEDALID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}MEDAL_MEDALID FOR {objectQualifier}MEDAL
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.MEDALID IS NULL) THEN
  NEW.MEDALID = GEN_ID(SEQ_{objectQualifier}MEDAL_MEDALID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'FK_{objectQualifier}GROUP_GROUPID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER FK_{objectQualifier}GROUP_GROUPID FOR {objectQualifier}GROUP
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.GROUPID IS NULL) THEN
  NEW.GROUPID = GEN_ID(SEQ_{objectQualifier}GROUP_GROUPID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}MESSAGE_MESSAGEID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}MESSAGE_MESSAGEID FOR {objectQualifier}MESSAGE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.MESSAGEID IS NULL) THEN
  NEW.MESSAGEID = GEN_ID(SEQ_{objectQualifier}MESSAGE_MESSAGEID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}MESSAG_LOGID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}MESSAG_LOGID FOR {objectQualifier}MESSAGEREPORTEDAUDIT
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.LOGID IS NULL) THEN
  NEW.LOGID = GEN_ID(SEQ_{objectQualifier}MESSAGE_LOGID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}NNTPFORUM_NNTPFORUMID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}NNTPFORUM_NNTPFORUMID FOR {objectQualifier}NNTPFORUM
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.NNTPFORUMID IS NULL) THEN
  NEW.NNTPFORUMID = GEN_ID(SEQ_{objectQualifier}NNTPFORUM_NNTPFORUMID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}NNTPSE_NNTPSERVERID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}NNTPSE_NNTPSERVERID FOR {objectQualifier}NNTPSERVER
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.NNTPSERVERID IS NULL) THEN
  NEW.NNTPSERVERID = GEN_ID(SEQ_{objectQualifier}NNTPSERVER_NNTPSERVERID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}NNTPTOPIC_NNTPTOPICID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}NNTPTOPIC_NNTPTOPICID FOR {objectQualifier}NNTPTOPIC
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.NNTPTOPICID IS NULL) THEN
  NEW.NNTPTOPICID = GEN_ID(SEQ_{objectQualifier}NNTPTOPIC_NNTPTOPICID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}PMESSAGE_PMESSAGEID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}PMESSAGE_PMESSAGEID FOR {objectQualifier}PMESSAGE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.PMESSAGEID IS NULL) THEN
  NEW.PMESSAGEID = GEN_ID(SEQ_{objectQualifier}PMESSAGE_PMESSAGEID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}POLLVOTE_POLLVOTEID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}POLLVOTE_POLLVOTEID FOR {objectQualifier}POLLVOTE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.POLLVOTEID IS NULL) THEN
  NEW.POLLVOTEID = GEN_ID(SEQ_{objectQualifier}POLLVOTE_POLLVOTEID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}RANK_RANKID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}RANK_RANKID FOR {objectQualifier}RANK
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.RANKID IS NULL) THEN
  NEW.RANKID = GEN_ID(SEQ_{objectQualifier}RANK_RANKID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}REGISTRY_REGISTRYID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}REGISTRY_REGISTRYID FOR {objectQualifier}REGISTRY
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.REGISTRYID IS NULL) THEN
  NEW.REGISTRYID = GEN_ID(SEQ_{objectQualifier}REGISTRY_REGISTRYID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}REPLACE_WORDS_ID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}REPLACE_WORDS_ID FOR {objectQualifier}REPLACE_WORDS
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.ID IS NULL) THEN
  NEW.ID = GEN_ID(SEQ_{objectQualifier}REPLACE_WORDS_ID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}SMILEY_SMILEYID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}SMILEY_SMILEYID FOR {objectQualifier}SMILEY
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.SMILEYID IS NULL) THEN
  NEW.SMILEYID = GEN_ID(SEQ_{objectQualifier}SMILEY_SMILEYID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}USER_USERID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}USER_USERID FOR {objectQualifier}USER
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.USERID IS NULL) THEN
  NEW.USERID = GEN_ID(SEQ_{objectQualifier}USER_USERID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}USERPM_USERPMESSAGEID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}USERPM_USERPMESSAGEID FOR {objectQualifier}USERPMESSAGE
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.USERPMESSAGEID IS NULL) THEN
  NEW.USERPMESSAGEID = GEN_ID(SEQ_{objectQualifier}USERPME_USERPMESSAGEID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}WATCHF_WATCHFORUMID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}WATCHF_WATCHFORUMID FOR {objectQualifier}WATCHFORUM
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.WATCHFORUMID IS NULL) THEN
  NEW.WATCHFORUMID = GEN_ID(SEQ_{objectQualifier}WATCHFORUM_WATCHFORUMID, 1);
END;';
END
--GO


EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}WATCHT_WATCHTOPICID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}WATCHT_WATCHTOPICID FOR {objectQualifier}WATCHTOPIC
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.WATCHTOPICID IS NULL) THEN
  NEW.WATCHTOPICID = GEN_ID(SEQ_{objectQualifier}WATCHTOPIC_WATCHTOPICID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}TAGS_INS' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}TAGS_INS FOR {objectQualifier}TAGS
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.TAGID IS NULL) THEN
  NEW.TAGID = GEN_ID(SEQ_{objectQualifier}TAGS_TAGID, 1);
END;';
END
--GO

EXECUTE BLOCK
AS
BEGIN
 IF (NOT EXISTS(
    SELECT 1 FROM RDB$TRIGGERS T
    WHERE T.RDB$TRIGGER_NAME = 'TR_AI_{objectQualifier}POLLGROUPCL_ID' 
  )) THEN  
EXECUTE STATEMENT 'CREATE TRIGGER TR_AI_{objectQualifier}POLLGROUPCL_ID FOR {objectQualifier}POLLGROUPCLUSTER
ACTIVE BEFORE INSERT
POSITION 0
AS
BEGIN
IF (NEW.POLLGROUPID IS NULL) THEN
  NEW.POLLGROUPID = GEN_ID(SEQ_{objectQualifier}PGC_POLLGROUPID, 1);
END;';
END
--GO